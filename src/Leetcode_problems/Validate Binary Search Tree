https://leetcode.com/problems/validate-binary-search-tree/

Validate Binary Search Tree

Solution:

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
     ArrayList <Integer> al=new ArrayList <Integer> ();
    public boolean isValidBST(TreeNode root) {
        if(root!=null)
        {
        isValidBST(root.left);
        al.add(root.val);
        isValidBST(root.right);
        }



        for(int i=0;i<al.size()-1;i++)
        {
            if(al.get(i)>=al.get(i+1))
            {
               return false;
            }
        }
        return true;
       /* if(root.right==null && root.left==null)
        {
            return true;
        }
        if(root.left!=null && root.right!=null)
        {
            if(root.val<root.right.val && root.left.val<root.val)
            {
                isValidBST(root.left);
                isValidBST(root.right);
                return true;
            }
            else
            {
                return false;
            }
        }
        else if(root.left!=null && root.right==null)
        {
            if(root.val>root.left.val)
            {
                isValidBST(root.left);
                return true;
            }
            else
            {
                return false;
            }
        }
        else if(root.left==null && root.right!=null)
        {
            if(root.val<root.right.val)
            {
                isValidBST(root.right);
                return true;
            }
            else
            {
                return false;
            }
        }
        return true;*/
    }
}
